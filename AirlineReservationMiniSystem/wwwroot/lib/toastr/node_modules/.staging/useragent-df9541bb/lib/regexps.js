"use strict";

/**
 * TL;DR: Don't touch this.
 *
 * DO NOT EDIT THIS FILE, IT IS AUTOMATICALLY GENERATED AND COMPILED FROM AN
 * EXTERNAL REGEXPS DATABASE. TO UPDATE THIS FILE MANUALLY PLEASE RUN THE:
 *
 * ```
 * npm run update
 * ```
 *
 * COMMAND FROM THE ROOT OF THIS REPOSITORY. IF YOU FOUND A REGULAR EXPRESSION THAT
 * IS BROKEN OR MISSING. PLEASE MAKE THE PULL REQUESTS TO REGEXP DATABASE NOT TO
 * THIS MODULE AS THEY WILL BE REJECTED INSTANTLY. THE SOURCE FILE LOCATION CAN
 * BE FOUND IN THE `update.js` FILE WHICH IS IN THE SAME FOLDER AS THIS FILE. PLEASE
 * SEE THE `exports.remote` PART OF THE FILE.
 */


var parser;

exports.browser = Object.create(null);

parser = Object.create(null);
parser[0] = new RegExp("(Rival IQ, rivaliq.com)");
parser[1] = "Rival IQ";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[0] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(CFNetwork)(?:/(\\d+)\\.(\\d+)\\.?(\\d+)?)?");
parser[1] = "CFNetwork";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[1] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Pingdom.com_bot_version_)(\\d+)\\.(\\d+)");
parser[1] = "PingdomBot";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[2] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(PingdomTMS)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "PingdomBot";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[3] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(\\(StatusCake\\))");
parser[1] = "StatusCakeBot";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[4] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(facebookexternalhit)/(\\d+)\\.(\\d+)");
parser[1] = "FacebookBot";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[5] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Google.*/\\+/web/snippet");
parser[1] = "GooglePlusBot";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[6] = parser;
parser = Object.create(null);
parser[0] = new RegExp("via ggpht.com GoogleImageProxy");
parser[1] = "GmailImageProxy";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[7] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Twitterbot)/(\\d+)\\.(\\d+)");
parser[1] = "TwitterBot";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[8] = parser;
parser = Object.create(null);
parser[0] = new RegExp("/((?:Ant-)?Nutch|[A-z]+[Bb]ot|[A-z]+[Ss]pider|Axtaris|fetchurl|Isara|ShopSalad|Tailsweep)[ \\-](\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[9] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\b(008|Altresium|Argus|BaiduMobaider|BoardReader|DNSGroup|DataparkSearch|EDI|Goodzer|Grub|INGRID|Infohelfer|LinkedInBot|LOOQ|Nutch|PathDefender|Peew|PostPost|Steeler|Twitterbot|VSE|WebCrunch|WebZIP|Y!J-BR[A-Z]|YahooSeeker|envolk|sproose|wminer)/(\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[10] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(MSIE) (\\d+)\\.(\\d+)([a-z]\\d?)?;.* MSIECrawler");
parser[1] = "MSIECrawler";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[11] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Google-HTTP-Java-Client|Apache-HttpClient|http%20client|Python-urllib|HttpMonitor|TLSProber|WinHTTP|JNLP|okhttp)(?:[ /](\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[12] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(1470\\.net crawler|50\\.nu|8bo Crawler Bot|Aboundex|Accoona-[A-z]+-Agent|AdsBot-Google(?:-[a-z]+)?|altavista|AppEngine-Google|archive.*?\\.org_bot|archiver|Ask Jeeves|[Bb]ai[Dd]u[Ss]pider(?:-[A-Za-z]+)*|bingbot|BingPreview|blitzbot|BlogBridge|Bloglovin|BoardReader(?: [A-Za-z]+)*|boitho.com-dc|BotSeer|\\b\\w*favicon\\w*\\b|\\bYeti(?:-[a-z]+)?|Catchpoint(?: bot)?|[Cc]harlotte|Checklinks|clumboot|Comodo HTTP\\(S\\) Crawler|Comodo-Webinspector-Crawler|ConveraCrawler|CRAWL-E|CrawlConvera|Daumoa(?:-feedfetcher)?|Feed Seeker Bot|Feedbin|findlinks|Flamingo_SearchEngine|FollowSite Bot|furlbot|Genieo|gigabot|GomezAgent|gonzo1|(?:[a-zA-Z]+-)?Googlebot(?:-[a-zA-Z]+)?|Google SketchUp|grub-client|gsa-crawler|heritrix|HiddenMarket|holmes|HooWWWer|htdig|ia_archiver|ICC-Crawler|Icarus6j|ichiro(?:/mobile)?|IconSurf|IlTrovatore(?:-Setaccio)?|InfuzApp|Innovazion Crawler|InternetArchive|IP2[a-z]+Bot|jbot\\b|KaloogaBot|Kraken|Kurzor|larbin|LEIA|LesnikBot|Linguee Bot|LinkAider|LinkedInBot|Lite Bot|Llaut|lycos|Mail\\.RU_Bot|masscan|masidani_bot|Mediapartners-Google|Microsoft .*? Bot|mogimogi|mozDex|MJ12bot|msnbot(?:-media *)?|msrbot|Mtps Feed Aggregation System|netresearch|Netvibes|NewsGator[^/]*|^NING|Nutch[^/]*|Nymesis|ObjectsSearch|Orbiter|OOZBOT|PagePeeker|PagesInventory|PaxleFramework|Peeplo Screenshot Bot|PlantyNet_WebRobot|Pompos|Qwantify|Read%20Later|Reaper|RedCarpet|Retreiver|Riddler|Rival IQ|scooter|Scrapy|Scrubby|searchsight|seekbot|semanticdiscovery|Simpy|SimplePie|SEOstats|SimpleRSS|SiteCon|Slackbot-LinkExpanding|Slack-ImgProxy|Slurp|snappy|Speedy Spider|Squrl Java|Stringer|TheUsefulbot|ThumbShotsBot|Thumbshots\\.ru|Tiny Tiny RSS|TwitterBot|WhatsApp|URL2PNG|Vagabondo|VoilaBot|^vortex|Votay bot|^voyager|WASALive.Bot|Web-sniffer|WebThumb|WeSEE:[A-z]+|WhatWeb|WIRE|WordPress|Wotbox|www\\.almaden\\.ibm\\.com|Xenu(?:.s)? Link Sleuth|Xerka [A-z]+Bot|yacy(?:bot)?|Yahoo[a-z]*Seeker|Yahoo! Slurp|Yandex\\w+|YodaoBot(?:-[A-z]+)?|YottaaMonitor|Yowedo|^Zao|^Zao-Crawler|ZeBot_www\\.ze\\.bz|ZooShot|ZyBorg)(?:[ /]v?(\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[13] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(?:\\/[A-Za-z0-9\\.]+)? *([A-Za-z0-9 \\-_\\!\\[\\]:]*(?:[Aa]rchiver|[Ii]ndexer|[Ss]craper|[Bb]ot|[Ss]pider|[Cc]rawl[a-z]*))/(\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[14] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(?:\\/[A-Za-z0-9\\.]+)? *([A-Za-z0-9 _\\!\\[\\]:]*(?:[Aa]rchiver|[Ii]ndexer|[Ss]craper|[Bb]ot|[Ss]pider|[Cc]rawl[a-z]*)) (\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[15] = parser;
parser = Object.create(null);
parser[0] = new RegExp("((?:[A-z0-9]+|[A-z\\-]+ ?)?(?: the )?(?:[Ss][Pp][Ii][Dd][Ee][Rr]|[Ss]crape|[A-Za-z0-9-]*(?:[^C][^Uu])[Bb]ot|[Cc][Rr][Aa][Ww][Ll])[A-z0-9]*)(?:(?:[ /]| v)(\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[16] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(HbbTV)/(\\d+)\\.(\\d+)\\.(\\d+) \\(");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[17] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Chimera|SeaMonkey|Camino)/(\\d+)\\.(\\d+)\\.?([ab]?\\d+[a-z]*)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[18] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\[FB.*;(FBAV)/(\\d+)(?:\\.(\\d+)(?:\\.(\\d)+)?)?");
parser[1] = "Facebook";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[19] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\[(Pinterest)/[^\\]]+\\]");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[20] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Pinterest)(?: for Android(?: Tablet)?)?/(\\d+)(?:\\.(\\d+)(?:\\.(\\d)+)?)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[21] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(PaleMoon)/(\\d+)\\.(\\d+)\\.?(\\d+)?");
parser[1] = "Pale Moon";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[22] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Fennec)/(\\d+)\\.(\\d+)\\.?([ab]?\\d+[a-z]*)");
parser[1] = "Firefox Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[23] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Fennec)/(\\d+)\\.(\\d+)(pre)");
parser[1] = "Firefox Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[24] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Fennec)/(\\d+)\\.(\\d+)");
parser[1] = "Firefox Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[25] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(?:Mobile|Tablet);.*(Firefox)/(\\d+)\\.(\\d+)");
parser[1] = "Firefox Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[26] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Namoroka|Shiretoko|Minefield)/(\\d+)\\.(\\d+)\\.(\\d+(?:pre)?)");
parser[1] = "Firefox ($1)";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[27] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Firefox)/(\\d+)\\.(\\d+)(a\\d+[a-z]*)");
parser[1] = "Firefox Alpha";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[28] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Firefox)/(\\d+)\\.(\\d+)(b\\d+[a-z]*)");
parser[1] = "Firefox Beta";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[29] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Firefox)-(?:\\d+\\.\\d+)?/(\\d+)\\.(\\d+)(a\\d+[a-z]*)");
parser[1] = "Firefox Alpha";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[30] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Firefox)-(?:\\d+\\.\\d+)?/(\\d+)\\.(\\d+)(b\\d+[a-z]*)");
parser[1] = "Firefox Beta";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[31] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Namoroka|Shiretoko|Minefield)/(\\d+)\\.(\\d+)([ab]\\d+[a-z]*)?");
parser[1] = "Firefox ($1)";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[32] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Firefox).*Tablet browser (\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "MicroB";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[33] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(MozillaDeveloperPreview)/(\\d+)\\.(\\d+)([ab]\\d+[a-z]*)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[34] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(FxiOS)/(\\d+)\\.(\\d+)(\\.(\\d+))?(\\.(\\d+))?");
parser[1] = "Firefox iOS";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[35] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Flock)/(\\d+)\\.(\\d+)(b\\d+?)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[36] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(RockMelt)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[37] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Navigator)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Netscape";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[38] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Navigator)/(\\d+)\\.(\\d+)([ab]\\d+)");
parser[1] = "Netscape";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[39] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Netscape6)/(\\d+)\\.(\\d+)\\.?([ab]?\\d+)?");
parser[1] = "Netscape";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[40] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(MyIBrow)/(\\d+)\\.(\\d+)");
parser[1] = "My Internet Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[41] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(UC? ?Browser|UCWEB|U3)[ /]?(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "UC Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[42] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Opera Tablet).*Version/(\\d+)\\.(\\d+)(?:\\.(\\d+))?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[43] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Opera Mini)(?:/att)?/?(\\d+)?(?:\\.(\\d+))?(?:\\.(\\d+))?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[44] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Opera)/.+Opera Mobi.+Version/(\\d+)\\.(\\d+)");
parser[1] = "Opera Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[45] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Opera)/(\\d+)\\.(\\d+).+Opera Mobi");
parser[1] = "Opera Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[46] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Opera Mobi.+(Opera)(?:/|\\s+)(\\d+)\\.(\\d+)");
parser[1] = "Opera Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[47] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Opera Mobi");
parser[1] = "Opera Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[48] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Opera)/9.80.*Version/(\\d+)\\.(\\d+)(?:\\.(\\d+))?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[49] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(?:Mobile Safari).*(OPR)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Opera Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[50] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(?:Chrome).*(OPR)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Opera";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[51] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Coast)/(\\d+).(\\d+).(\\d+)");
parser[1] = "Opera Coast";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[52] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(OPiOS)/(\\d+).(\\d+).(\\d+)");
parser[1] = "Opera Mini";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[53] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Chrome/.+( MMS)/(\\d+).(\\d+).(\\d+)");
parser[1] = "Opera Neon";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[54] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(hpw|web)OS/(\\d+)\\.(\\d+)(?:\\.(\\d+))?");
parser[1] = "webOS Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[55] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(luakit)");
parser[1] = "LuaKit";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[56] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Snowshoe)/(\\d+)\\.(\\d+).(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[57] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Gecko/\\d+ (Lightning)/(\\d+)\\.(\\d+)\\.?((?:[ab]?\\d+[a-z]*)|(?:\\d*))");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[58] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Firefox)/(\\d+)\\.(\\d+)\\.(\\d+(?:pre)?) \\(Swiftfox\\)");
parser[1] = "Swiftfox";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[59] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Firefox)/(\\d+)\\.(\\d+)([ab]\\d+[a-z]*)? \\(Swiftfox\\)");
parser[1] = "Swiftfox";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[60] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(rekonq)/(\\d+)\\.(\\d+)\\.?(\\d+)? Safari");
parser[1] = "Rekonq";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[61] = parser;
parser = Object.create(null);
parser[0] = new RegExp("rekonq");
parser[1] = "Rekonq";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[62] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(conkeror|Conkeror)/(\\d+)\\.(\\d+)\\.?(\\d+)?");
parser[1] = "Conkeror";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[63] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(konqueror)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Konqueror";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[64] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(WeTab)-Browser");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[65] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Comodo_Dragon)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Comodo Dragon";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[66] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Symphony) (\\d+).(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[67] = parser;
parser = Object.create(null);
parser[0] = new RegExp("PLAYSTATION 3.+WebKit");
parser[1] = "NetFront NX";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[68] = parser;
parser = Object.create(null);
parser[0] = new RegExp("PLAYSTATION 3");
parser[1] = "NetFront";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[69] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(PlayStation Portable)");
parser[1] = "NetFront";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[70] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(PlayStation Vita)");
parser[1] = "NetFront NX";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[71] = parser;
parser = Object.create(null);
parser[0] = new RegExp("AppleWebKit.+ (NX)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "NetFront NX";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[72] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Nintendo 3DS)");
parser[1] = "NetFront NX";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[73] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Silk)/(\\d+)\\.(\\d+)(?:\\.([0-9\\-]+))?");
parser[1] = "Amazon Silk";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[74] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Puffin)/(\\d+)\\.(\\d+)(?:\\.(\\d+))?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[75] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Windows Phone .*(Edge)/(\\d+)\\.(\\d+)");
parser[1] = "Edge Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[76] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(SamsungBrowser)/(\\d+)\\.(\\d+)");
parser[1] = "Samsung Internet";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[77] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(SznProhlizec)/(\\d+)\\.(\\d+)(?:\\.(\\d+))?");
parser[1] = "Seznam.cz";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[78] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(coc_coc_browser)/(\\d+)\\.(\\d+)(?:\\.(\\d+))?");
parser[1] = "Coc Coc";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[79] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(baidubrowser)[/\\s](\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?");
parser[1] = "Baidu Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[80] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(FlyFlow)/(\\d+)\\.(\\d+)");
parser[1] = "Baidu Explorer";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[81] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(MxBrowser)/(\\d+)\\.(\\d+)(?:\\.(\\d+))?");
parser[1] = "Maxthon";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[82] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Crosswalk)/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[83] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; wv\\).+(Chrome)/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Chrome Mobile WebView";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[84] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(CrMo)/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Chrome Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[85] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(CriOS)/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Chrome Mobile iOS";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[86] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Chrome)/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+) Mobile(?:[ /]|$)");
parser[1] = "Chrome Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[87] = parser;
parser = Object.create(null);
parser[0] = new RegExp(" Mobile .*(Chrome)/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Chrome Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[88] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(chromeframe)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Chrome Frame";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[89] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(SLP Browser)/(\\d+)\\.(\\d+)");
parser[1] = "Tizen Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[90] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(SE 2\\.X) MetaSr (\\d+)\\.(\\d+)");
parser[1] = "Sogou Explorer";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[91] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(MQQBrowser/Mini)(?:(\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?)?");
parser[1] = "QQ Browser Mini";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[92] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(MQQBrowser)(?:/(\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?)?");
parser[1] = "QQ Browser Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[93] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(QQBrowser)(?:/(\\d+)(?:\\.(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?)?");
parser[1] = "QQ Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[94] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Rackspace Monitoring)/(\\d+)\\.(\\d+)");
parser[1] = "RackspaceBot";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[95] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(PyAMF)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[96] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(YaBrowser)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Yandex Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[97] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Chrome)/(\\d+)\\.(\\d+)\\.(\\d+).* MRCHROME");
parser[1] = "Mail.ru Chromium Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[98] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(AOL) (\\d+)\\.(\\d+); AOLBuild (\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[99] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Slack_SSB)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Slack Desktop Client";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[100] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(HipChat)/?(\\d+)?");
parser[1] = "HipChat Desktop Client";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[101] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\b(MobileIron|FireWeb|Jasmine|ANTGalio|Midori|Fresco|Lobo|PaleMoon|Maxthon|Lynx|OmniWeb|Dillo|Camino|Demeter|Fluid|Fennec|Epiphany|Shiira|Sunrise|Spotify|Flock|Netscape|Lunascape|WebPilot|NetFront|Netfront|Konqueror|SeaMonkey|Kazehakase|Vienna|Iceape|Iceweasel|IceWeasel|Iron|K-Meleon|Sleipnir|Galeon|GranParadiso|Opera Mini|iCab|NetNewsWire|ThunderBrowse|Iris|UP\\.Browser|Bunjalloo|Google Earth|Raven for Mac|Openwave|MacOutlook|Electron)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[102] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Microsoft Office Outlook 12\\.\\d+\\.\\d+|MSOffice 12");
parser[1] = "Outlook";
parser[2] = "2007";
parser[3] = 0;
parser[4] = 0;
exports.browser[103] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Microsoft Outlook 14\\.\\d+\\.\\d+|MSOffice 14");
parser[1] = "Outlook";
parser[2] = "2010";
parser[3] = 0;
parser[4] = 0;
exports.browser[104] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Microsoft Outlook 15\\.\\d+\\.\\d+");
parser[1] = "Outlook";
parser[2] = "2013";
parser[3] = 0;
parser[4] = 0;
exports.browser[105] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Microsoft Outlook (?:Mail )?16\\.\\d+\\.\\d+");
parser[1] = "Outlook";
parser[2] = "2016";
parser[3] = 0;
parser[4] = 0;
exports.browser[106] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Outlook-Express\\/7\\.0.*");
parser[1] = "Windows Live Mail";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[107] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Airmail) (\\d+)\\.(\\d+)(?:\\.(\\d+))?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[108] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Thunderbird)/(\\d+)\\.(\\d+)(?:\\.(\\d+(?:pre)?))?");
parser[1] = "Thunderbird";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[109] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Postbox)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Postbox";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[110] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Barca(?:Pro)?)/(\\d+)\\.(\\d+)(?:\\.(\\d+))?");
parser[1] = "Barca";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[111] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Lotus-Notes)/(\\d+)\\.(\\d+)(?:\\.(\\d+))?");
parser[1] = "Lotus Notes";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[112] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Vivaldi)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[113] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Edge)/(\\d+)(?:\\.(\\d+))?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[114] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(brave)/(\\d+)\\.(\\d+)\\.(\\d+) Chrome");
parser[1] = "Brave";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[115] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Chrome)/(\\d+)\\.(\\d+)\\.(\\d+)[\\d.]* Iron[^/]");
parser[1] = "Iron";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[116] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\b(Dolphin)(?: |HDCN/|/INT\\-)(\\d+)\\.(\\d+)\\.?(\\d+)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[117] = parser;
parser = Object.create(null);
parser[0] = new RegExp("HeadlessChrome");
parser[1] = "HeadlessChrome";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[118] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(bingbot|Bolt|AdobeAIR|Jasmine|IceCat|Skyfire|Midori|Maxthon|Lynx|Arora|IBrowse|Dillo|Camino|Shiira|Fennec|Phoenix|Flock|Netscape|Lunascape|Epiphany|WebPilot|Opera Mini|Opera|NetFront|Netfront|Konqueror|Googlebot|SeaMonkey|Kazehakase|Vienna|Iceape|Iceweasel|IceWeasel|Iron|K-Meleon|Sleipnir|Galeon|GranParadiso|iCab|iTunes|MacAppStore|NetNewsWire|Space Bison|Stainless|Orca|Dolfin|BOLT|Minimo|Tizen Browser|Polaris|Abrowser|Planetweb|ICE Browser|mDolphin|qutebrowser|Otter|QupZilla|MailBar|kmail2|YahooMobileMail|ExchangeWebServices|ExchangeServicesClient|Dragon|Outlook-iOS-Android)/(\\d+)\\.(\\d+)(?:\\.(\\d+))?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[119] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Chromium|Chrome)/(\\d+)\\.(\\d+)(?:\\.(\\d+))?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[120] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(IEMobile)[ /](\\d+)\\.(\\d+)");
parser[1] = "IE Mobile";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[121] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(BacaBerita App)\\/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[122] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(iRider|Crazy Browser|SkipStone|iCab|Lunascape|Sleipnir|Maemo Browser) (\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[123] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(iCab|Lunascape|Opera|Android|Jasmine|Polaris|Microsoft SkyDriveSync|The Bat!) (\\d+)\\.(\\d+)\\.?(\\d+)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[124] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Kindle)/(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[125] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Android) Donut");
parser[1] = 0;
parser[2] = "1";
parser[3] = "2";
parser[4] = 0;
exports.browser[126] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Android) Eclair");
parser[1] = 0;
parser[2] = "2";
parser[3] = "1";
parser[4] = 0;
exports.browser[127] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Android) Froyo");
parser[1] = 0;
parser[2] = "2";
parser[3] = "2";
parser[4] = 0;
exports.browser[128] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Android) Gingerbread");
parser[1] = 0;
parser[2] = "2";
parser[3] = "3";
parser[4] = 0;
exports.browser[129] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Android) Honeycomb");
parser[1] = 0;
parser[2] = "3";
parser[3] = 0;
parser[4] = 0;
exports.browser[130] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(MSIE) (\\d+)\\.(\\d+).*XBLWP7");
parser[1] = "IE Large Screen";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[131] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Obigo)InternetBrowser");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[132] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Obigo)\\-Browser");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[133] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Obigo|OBIGO)[^\\d]*(\\d+)(?:.(\\d+))?");
parser[1] = "Obigo";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[134] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(MAXTHON|Maxthon) (\\d+)\\.(\\d+)");
parser[1] = "Maxthon";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[135] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Maxthon|MyIE2|Uzbl|Shiira)");
parser[1] = 0;
parser[2] = "0";
parser[3] = 0;
parser[4] = 0;
exports.browser[136] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(BrowseX) \\((\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[137] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(NCSA_Mosaic)/(\\d+)\\.(\\d+)");
parser[1] = "NCSA Mosaic";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[138] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(POLARIS)/(\\d+)\\.(\\d+)");
parser[1] = "Polaris";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[139] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Embider)/(\\d+)\\.(\\d+)");
parser[1] = "Polaris";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[140] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(BonEcho)/(\\d+)\\.(\\d+)\\.?([ab]?\\d+)?");
parser[1] = "Bon Echo";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[141] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(iPod|iPhone|iPad).+Version/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*[ +]Safari");
parser[1] = "Mobile Safari";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[142] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(iPod|iPhone|iPad).+Version/(\\d+)\\.(\\d+)(?:\\.(\\d+))?");
parser[1] = "Mobile Safari UI/WKWebView";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[143] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(iPod|iPod touch|iPhone|iPad);.*CPU.*OS[ +](\\d+)_(\\d+)(?:_(\\d+))?.*Mobile.*[ +]Safari");
parser[1] = "Mobile Safari";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[144] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(iPod|iPod touch|iPhone|iPad);.*CPU.*OS[ +](\\d+)_(\\d+)(?:_(\\d+))?.*Mobile");
parser[1] = "Mobile Safari UI/WKWebView";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[145] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(iPod|iPhone|iPad).* Safari");
parser[1] = "Mobile Safari";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[146] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(iPod|iPhone|iPad)");
parser[1] = "Mobile Safari UI/WKWebView";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[147] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(AvantGo) (\\d+).(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[148] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(OneBrowser)/(\\d+).(\\d+)");
parser[1] = "ONE Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[149] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Avant)");
parser[1] = 0;
parser[2] = "1";
parser[3] = 0;
parser[4] = 0;
exports.browser[150] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(QtCarBrowser)");
parser[1] = 0;
parser[2] = "1";
parser[3] = 0;
parser[4] = 0;
exports.browser[151] = parser;
parser = Object.create(null);
parser[0] = new RegExp("^(iBrowser/Mini)(\\d+).(\\d+)");
parser[1] = "iBrowser Mini";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[152] = parser;
parser = Object.create(null);
parser[0] = new RegExp("^(iBrowser|iRAPP)/(\\d+).(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[153] = parser;
parser = Object.create(null);
parser[0] = new RegExp("^(Nokia)");
parser[1] = "Nokia Services (WAP) Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[154] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(NokiaBrowser)/(\\d+)\\.(\\d+).(\\d+)\\.(\\d+)");
parser[1] = "Nokia Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[155] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(NokiaBrowser)/(\\d+)\\.(\\d+).(\\d+)");
parser[1] = "Nokia Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[156] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(NokiaBrowser)/(\\d+)\\.(\\d+)");
parser[1] = "Nokia Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[157] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(BrowserNG)/(\\d+)\\.(\\d+).(\\d+)");
parser[1] = "Nokia Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[158] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Series60)/5\\.0");
parser[1] = "Nokia Browser";
parser[2] = "7";
parser[3] = "0";
parser[4] = 0;
exports.browser[159] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Series60)/(\\d+)\\.(\\d+)");
parser[1] = "Nokia OSS Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[160] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(S40OviBrowser)/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Ovi Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[161] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Nokia)[EN]?(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[162] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(PlayBook).+RIM Tablet OS (\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "BlackBerry WebKit";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[163] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Black[bB]erry|BB10).+Version/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "BlackBerry WebKit";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[164] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Black[bB]erry)\\s?(\\d+)");
parser[1] = "BlackBerry";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[165] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(OmniWeb)/v(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[166] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Blazer)/(\\d+)\\.(\\d+)");
parser[1] = "Palm Blazer";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[167] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Pre)/(\\d+)\\.(\\d+)");
parser[1] = "Palm Pre";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[168] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(ELinks)/(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[169] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(ELinks) \\((\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[170] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Links) \\((\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[171] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(QtWeb) Internet Browser/(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[172] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(PhantomJS)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[173] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(AppleWebKit)/(\\d+)\\.?(\\d+)?\\+ .* Safari");
parser[1] = "WebKit Nightly";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[174] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Version)/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari/");
parser[1] = "Safari";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[175] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Safari)/\\d+");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[176] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(OLPC)/Update(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[177] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(OLPC)/Update()\\.(\\d+)");
parser[1] = 0;
parser[2] = "0";
parser[3] = 0;
parser[4] = 0;
exports.browser[178] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(SEMC\\-Browser)/(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[179] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Teleca)");
parser[1] = "Teleca Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[180] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Phantom)/V(\\d+)\\.(\\d+)");
parser[1] = "Phantom Browser";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[181] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Trident(.*)rv.(\\d+)\\.(\\d+)");
parser[1] = "IE";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[182] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Espial)/(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[183] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(AppleWebKit)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Apple Mail";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[184] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Firefox)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[185] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Firefox)/(\\d+)\\.(\\d+)(pre|[ab]\\d+[a-z]*)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[186] = parser;
parser = Object.create(null);
parser[0] = new RegExp("([MS]?IE) (\\d+)\\.(\\d+)");
parser[1] = "IE";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[187] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(python-requests)/(\\d+)\\.(\\d+)");
parser[1] = "Python Requests";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[188] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\b(Windows-Update-Agent|Microsoft-CryptoAPI|SophosUpdateManager|SophosAgent|Debian APT-HTTP|Ubuntu APT-HTTP|libcurl-agent|libwww-perl|urlgrabber|curl|Wget|OpenBSD ftp|jupdate)(?:[ /](\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?)?");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[189] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Java)[/ ]{0,1}\\d+\\.(\\d+)\\.(\\d+)[_-]*([a-zA-Z0-9]+)*");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[190] = parser;
parser = Object.create(null);
parser[0] = new RegExp("^(Roku)/DVP-(\\d+)\\.(\\d+)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[191] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Kurio)\\/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "Kurio App";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[192] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Wget)/(\\d+)\\.(\\d+)\\.?([ab]?\\d+[a-z]*)");
parser[1] = 0;
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[193] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(curl)/(\\d+)\\.(\\d+)\\.(\\d+)");
parser[1] = "cURL";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.browser[194] = parser;

exports.browser.length = 195;

exports.device = Object.create(null);

parser = Object.create(null);
parser[0] = new RegExp("(Rival IQ, rivaliq.com)");
parser[1] = "Spider";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[0] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(?:(?:iPhone|Windows CE|Windows Phone|Android).*(?:(?:Bot|Yeti)-Mobile|YRSpider|BingPreview|bots?/\\d|(?:bot|spider)\\.html)|AdsBot-Google-Mobile.*iPhone)");
parser[1] = "Spider";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[1] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(?:DoCoMo|\\bMOT\\b|\\bLG\\b|Nokia|Samsung|SonyEricsson).*(?:(?:Bot|Yeti)-Mobile|bots?/\\d|(?:bot|crawler)\\.html|(?:jump|google|Wukong)bot|ichiro/mobile|/spider|YahooSeeker)");
parser[1] = "Spider";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[2] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\bSmartWatch *\\( *([^;]+) *; *([^;]+) *;");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[3] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Android Application[^\\-]+ - (Sony) ?(Ericsson)? (.+) \\w+ - ");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[4] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Android Application[^\\-]+ - (?:HTC|HUAWEI|LGE|LENOVO|MEDION|TCT) (HTC|HUAWEI|LG|LENOVO|MEDION|ALCATEL)[ _\\-](.+) \\w+ - ");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[5] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Android Application[^\\-]+ - ([^ ]+) (.+) \\w+ - ");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[6] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([BLRQ]C\\d{4}[A-Z]+) +Build/");
parser[1] = "3Q $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[7] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:3Q_)([^;/]+) +Build");
parser[1] = "3Q $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[8] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Android [34].*; *(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700(?: Lite| 3G)?|A701|B1-A71|A1-\\d{3}|B1-\\d{3}|V360|V370|W500|W500P|W501|W501P|W510|W511|W700|Slider SL101|DA22[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[9] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Acer Iconia Tab ([^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[10] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Z1[1235]0|E320[^/]*|S500|S510|Liquid[^;/]*|Iconia A\\d+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[11] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Acer |ACER )([^;/]+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[12] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Advent )?(Vega(?:Bean|Comb)?).* Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[13] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Ainol )?((?:NOVO|[Nn]ovo)[^;/]+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[14] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *AIRIS[ _\\-]?([^/;\\)]+) *(?:;|\\)|Build)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[15] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(OnePAD[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[16] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Airpad[ \\-]([^;/]+) Build");
parser[1] = "Airpad $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[17] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(one ?touch) (EVO7|T10|T20) Build");
parser[1] = "Alcatel One Touch $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[18] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:alcatel[ _])?(?:(?:one[ _]?touch[ _])|ot[ \\-])([^;/]+);? Build");
parser[1] = "Alcatel One Touch $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[19] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TCL)[ _]([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[20] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Vodafone Smart II|Optimus_Madrid) Build");
parser[1] = "Alcatel $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[21] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *BASE_Lutea_3 Build");
parser[1] = "Alcatel One Touch 998";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[22] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *BASE_Varia Build");
parser[1] = "Alcatel One Touch 918D";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[23] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:FINE|Fine)\\d[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[24] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ALLVIEW[ _]?|Allview[ _]?)((?:Speed|SPEED).*) Build/");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[25] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ALLVIEW[ _]?|Allview[ _]?)?(AX1_Shine|AX2_Frenzy) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[26] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ALLVIEW[ _]?|Allview[ _]?)([^;/]*) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[27] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(A13-MID) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[28] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Allwinner)[ _\\-]?([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[29] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(A651|A701B?|A702|A703|A705|A706|A707|A711|A712|A713|A717|A722|A785|A801|A802|A803|A901|A902|A1002|A1003|A1006|A1007|A9701|A9703|Q710|Q80) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[30] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:AMOI|Amoi)[ _]([^;/]+) Build");
parser[1] = "Amoi $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[31] = parser;
parser = Object.create(null);
parser[0] = new RegExp("^(?:AMOI|Amoi)[ _]([^;/]+) Linux");
parser[1] = "Amoi $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[32] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(MW(?:0[789]|10)[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[33] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(G7|M1013|M1015G|M11[CG]?|M-?12[B]?|M15|M19[G]?|M30[ACQ]?|M31[GQ]|M32|M33[GQ]|M36|M37|M38|M701T|M710|M712B|M713|M715G|M716G|M71(?:G|GS|T)?|M72[T]?|M73[T]?|M75[GT]?|M77G|M79T|M7L|M7LN|M81|M810|M81T|M82|M92|M92KS|M92S|M717G|M721|M722G|M723|M725G|M739|M785|M791|M92SK|M93D) Build");
parser[1] = "Aoson $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[34] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Aoson ([^;/]+) Build");
parser[1] = "Aoson $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[35] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *[Aa]panda[ _\\-]([^;/]+) Build");
parser[1] = "Apanda $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[36] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:ARCHOS|Archos) ?(GAMEPAD.*?)(?: Build|[;/\\(\\)\\-])");
parser[1] = "Archos $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[37] = parser;
parser = Object.create(null);
parser[0] = new RegExp("ARCHOS; GOGI; ([^;]+);");
parser[1] = "Archos $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[38] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(?:ARCHOS|Archos)[ _]?(.*?)(?: Build|[;/\\(\\)\\-]|$)");
parser[1] = "Archos $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[39] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(AN(?:7|8|9|10|13)[A-Z0-9]{1,4}) Build");
parser[1] = "Archos $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[40] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(A28|A32|A43|A70(?:BHT|CHT|HB|S|X)|A101(?:B|C|IT)|A7EB|A7EB-WK|101G9|80G9) Build");
parser[1] = "Archos $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[41] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(PAD-FMD[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[42] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(BioniQ) ?([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[43] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(AN\\d[^;/]+|ARCHM\\d+) Build");
parser[1] = "Arnova $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[44] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:ARNOVA|Arnova) ?([^;/]+) Build");
parser[1] = "Arnova $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[45] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:ASSISTANT )?(AP)-?([1789]\\d{2}[A-Z]{0,2}|80104) Build");
parser[1] = "Assistant $1-$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[46] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ME17\\d[^;/]*|ME3\\d{2}[^;/]+|K00[A-Z]|Nexus 10|Nexus 7(?: 2013)?|PadFone[^;/]*|Transformer[^;/]*|TF\\d{3}[^;/]*|eeepc) Build");
parser[1] = "Asus $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[47] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *ASUS[ _]*([^;/]+) Build");
parser[1] = "Asus $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[48] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Garmin-Asus ([^;/]+) Build");
parser[1] = "Garmin-Asus $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[49] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Garminfone) Build");
parser[1] = "Garmin $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[50] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; (@TAB-[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[51] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(T-(?:07|[^0]\\d)[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[52] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Axioo[ _\\-]([^;/]+)|(picopad)[ _\\-]([^;/]+)) Build");
parser[1] = "Axioo $1$2 $3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[53] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(V(?:100|700|800)[^;/]*) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[54] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IBAK\\-[^;/]*) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[55] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(HY5001|HY6501|X12|X21|I5) Build");
parser[1] = "Bedove $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[56] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(JC-[^;/]*) Build");
parser[1] = "Benss $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[57] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(BB) ([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[58] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(BlackBird)[ _](I8.*) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[59] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(BlackBird)[ _](.*) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[60] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([0-9]+BP[EM][^;/]*|Endeavour[^;/]+) Build");
parser[1] = "Blaupunkt $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[61] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:BLU|Blu)[ _\\-])([^;/]+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[62] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:BMOBILE )?(Blu|BLU|DASH [^;/]+|VIVO 4\\.3|TANK 4\\.5) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[63] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TOUCH\\d[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[64] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(AX5\\d+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[65] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([Bb]q) ([^;/]+);? Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[66] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Maxwell [^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[67] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:B-Tab|B-TAB) ?\\d[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[68] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Broncho) ([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[69] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *CAPTIVA ([^;/]+) Build");
parser[1] = "Captiva $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[70] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(C771|CAL21|IS11CA) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[71] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Cat|CAT) ([^;/]+) Build");
parser[1] = "Cat $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[72] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Cat)(Nova.*) Build");
parser[1] = "Cat $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[73] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(INM8002KP|ADM8000KP_[AB]) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[74] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:[Cc]elkon[ _\\*]|CELKON[ _\\*])([^;/\\)]+) ?(?:Build|;|\\))");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[75] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Build/(?:[Cc]elkon)+_?([^;/_\\)]+)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[76] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(CT)-?(\\d+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[77] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(A19|A19Q|A105|A107[^;/\\)]*) ?(?:Build|;|\\))");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[78] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TPC[0-9]{4,5}) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[79] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Cloudfone)[ _](Excite)([^ ][^;/]+) Build");
parser[1] = "$1 $2 $3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[80] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Excite|ICE)[ _](\\d+[^;/]+) Build");
parser[1] = "Cloudfone $1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[81] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Cloudfone|CloudPad)[ _]([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[82] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:Aquila|Clanga|Rapax)[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[83] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:CFW-|Kyros )?(MID[0-9]{4}(?:[ABC]|SR|TV)?)(\\(3G\\)-4G| GB 8K| 3G| 8K| GB)? *(?:Build|[;\\)])");
parser[1] = "CobyKyros $1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[84] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([^;/]*)Coolpad[ _]([^;/]+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[85] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(CUBE[ _])?([KU][0-9]+ ?GT.*|A5300) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[86] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *CUBOT ([^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[87] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(BOBBY) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[88] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Dslide [^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[89] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(XCD)[ _]?(28|35) Build");
parser[1] = "Dell $1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[90] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(001DL) Build");
parser[1] = "Dell $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[91] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Dell|DELL) (Streak) Build");
parser[1] = "Dell $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[92] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(101DL|GS01|Streak Pro[^;/]*) Build");
parser[1] = "Dell $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[93] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([Ss]treak ?7) Build");
parser[1] = "Dell $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[94] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Mini-3iX) Build");
parser[1] = "Dell $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[95] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Dell|DELL)[ _](Aero|Venue|Thunder|Mini.*|Streak[ _]Pro) Build");
parser[1] = "Dell $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[96] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Dell[ _]([^;/]+) Build");
parser[1] = "Dell $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[97] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Dell ([^;/]+) Build");
parser[1] = "Dell $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[98] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TA[CD]-\\d+[^;/]*) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[99] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(iP[789]\\d{2}(?:-3G)?|IP10\\d{2}(?:-8GB)?) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[100] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(AirTab)[ _\\-]([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[101] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(F\\-\\d[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[102] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(HT-03A) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[103] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(HT\\-\\d[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[104] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(L\\-\\d[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[105] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(N\\-\\d[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[106] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(P\\-\\d[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[107] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SC\\-\\d[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[108] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SH\\-\\d[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[109] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SO\\-\\d[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[110] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(T\\-0[12][^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[111] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(DOOV)[ _]([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[112] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Enot|ENOT)[ -]?([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[113] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *[^;/]+ Build/(?:CROSS|Cross)+[ _\\-]([^\\)]+)");
parser[1] = "CROSS $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[114] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(CROSS|Cross)[ _\\-]([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[115] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Explay[_ ](.+?)(?:[\\)]| Build)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[116] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IQ.*) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[117] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Fly|FLY)[ _](IQ[^;]+|F[34]\\d+[^;]*);? Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[118] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(M532|Q572|FJL21) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[119] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(G1) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[120] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Geeksphone) ([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[121] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(G[^F]?FIVE) ([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[122] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Gionee)[ _\\-]([^;/]+)(?:/[^;/]+)? Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[123] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(GN\\d+[A-Z]?|INFINITY_PASSION|Ctrl_V1) Build");
parser[1] = "Gionee $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[124] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(E3) Build/JOP40D");
parser[1] = "Gionee $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[125] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:FONE|QUANTUM|INSIGNIA) \\d+[^;/]*|PLAYTAB) Build");
parser[1] = "GoClever $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[126] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *GOCLEVER ([^;/]+) Build");
parser[1] = "GoClever $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[127] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Glass \\d+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[128] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Pixel \\w+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[129] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(GSmart)[ -]([^/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[130] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(imx5[13]_[^/]+) Build");
parser[1] = "Freescale $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[131] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Haier[ _\\-]([^/]+) Build");
parser[1] = "Haier $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[132] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(PAD1016) Build");
parser[1] = "Haipad $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[133] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(M701|M7|M8|M9) Build");
parser[1] = "Haipad $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[134] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SN\\d+T[^;\\)/]*)(?: Build|[;\\)])");
parser[1] = "Hannspree $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[135] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Build/HCL ME Tablet ([^;\\)]+)[\\);]");
parser[1] = "HCLme $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[136] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([^;\\/]+) Build/HCL");
parser[1] = "HCLme $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[137] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(MID-?\\d{4}C[EM]) Build");
parser[1] = "Hena $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[138] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(EG\\d{2,}|HS-[^;/]+|MIRA[^;/]+) Build");
parser[1] = "Hisense $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[139] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(andromax[^;/]+) Build");
parser[1] = "Hisense $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[140] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:AMAZE[ _](S\\d+)|(S\\d+)[ _]AMAZE) Build");
parser[1] = "AMAZE $1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[141] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(PlayBook) Build");
parser[1] = "HP $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[142] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *HP ([^/]+) Build");
parser[1] = "HP $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[143] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([^/]+_tenderloin) Build");
parser[1] = "HP TouchPad";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[144] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(HUAWEI |Huawei-)?([UY][^;/]+) Build/(?:Huawei|HUAWEI)([UY][^\\);]+)\\)");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[145] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([^;/]+) Build[/ ]Huawei(MT1-U06|[A-Z]+\\d+[^\\);]+)[^\\);]*\\)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[146] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(S7|M860) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[147] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:HUAWEI|Huawei)[ \\-]?)(MediaPad) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[148] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:HUAWEI[ _]?|Huawei[ _])?Ascend[ _])([^;/]+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[149] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:HUAWEI|Huawei)[ _\\-]?)((?:G700-|MT-)[^;/]+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[150] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:HUAWEI|Huawei)[ _\\-]?)([^;/]+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[151] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(MediaPad[^;]+|SpringBoard) Build/Huawei");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[152] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([^;]+) Build/(?:Huawei|HUAWEI)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[153] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([Uu])([89]\\d{3}) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[154] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Ideos |IDEOS )(S7) Build");
parser[1] = "Huawei Ideos$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[155] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Ideos |IDEOS )([^;/]+\\s*|\\s*)Build");
parser[1] = "Huawei Ideos$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[156] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Orange Daytona|Pulse|Pulse Mini|Vodafone 858|C8500|C8600|C8650|C8660|Nexus 6P|ATH-.+?) Build[/ ]");
parser[1] = "Huawei $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[157] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *HTC[ _]([^;]+); Windows Phone");
parser[1] = "HTC $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[158] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:HTC[ _/])+([^ _/]+)(?:[/\\\\]1\\.0 | V|/| +)\\d+\\.\\d[\\d\\.]*(?: *Build|\\))");
parser[1] = "HTC $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[159] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:HTC[ _/])+([^ _/]+)(?:[ _/]([^ _/]+))?(?:[/\\\\]1\\.0 | V|/| +)\\d+\\.\\d[\\d\\.]*(?: *Build|\\))");
parser[1] = "HTC $1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[160] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:HTC[ _/])+([^ _/]+)(?:[ _/]([^ _/]+)(?:[ _/]([^ _/]+))?)?(?:[/\\\\]1\\.0 | V|/| +)\\d+\\.\\d[\\d\\.]*(?: *Build|\\))");
parser[1] = "HTC $1 $2 $3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[161] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:HTC[ _/])+([^ _/]+)(?:[ _/]([^ _/]+)(?:[ _/]([^ _/]+)(?:[ _/]([^ _/]+))?)?)?(?:[/\\\\]1\\.0 | V|/| +)\\d+\\.\\d[\\d\\.]*(?: *Build|\\))");
parser[1] = "HTC $1 $2 $3 $4";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[162] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:(?:HTC|htc)(?:_blocked)*[ _/])+([^ _/;]+)(?: *Build|[;\\)]| - )");
parser[1] = "HTC $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[163] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:(?:HTC|htc)(?:_blocked)*[ _/])+([^ _/]+)(?:[ _/]([^ _/;\\)]+))?(?: *Build|[;\\)]| - )");
parser[1] = "HTC $1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[164] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:(?:HTC|htc)(?:_blocked)*[ _/])+([^ _/]+)(?:[ _/]([^ _/]+)(?:[ _/]([^ _/;\\)]+))?)?(?: *Build|[;\\)]| - )");
parser[1] = "HTC $1 $2 $3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[165] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:(?:HTC|htc)(?:_blocked)*[ _/])+([^ _/]+)(?:[ _/]([^ _/]+)(?:[ _/]([^ _/]+)(?:[ _/]([^ /;]+))?)?)?(?: *Build|[;\\)]| - )");
parser[1] = "HTC $1 $2 $3 $4";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[166] = parser;
parser = Object.create(null);
parser[0] = new RegExp("HTC Streaming Player [^\\/]*/[^\\/]*/ htc_([^/]+) /");
parser[1] = "HTC $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[167] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(?:[;,] *|^)(?:htccn_chs-)?HTC[ _-]?([^;]+?)(?: *Build|clay|Android|-?Mozilla| Opera| Profile| UNTRUSTED|[;/\\(\\)]|$)");
parser[1] = "HTC $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[168] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(A6277|ADR6200|ADR6300|ADR6350|ADR6400[A-Z]*|ADR6425[A-Z]*|APX515CKT|ARIA|Desire[^_ ]*|Dream|EndeavorU|Eris|Evo|Flyer|HD2|Hero|HERO200|Hero CDMA|HTL21|Incredible|Inspire[A-Z0-9]*|Legend|Liberty|Nexus ?(?:One|HD2)|One|One S C2|One[ _]?(?:S|V|X\\+?)\\w*|PC36100|PG06100|PG86100|S31HT|Sensation|Wildfire)(?: Build|[/;\\(\\)])");
parser[1] = "HTC $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[169] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ADR6200|ADR6400L|ADR6425LVW|Amaze|DesireS?|EndeavorU|Eris|EVO|Evo\\d[A-Z]+|HD2|IncredibleS?|Inspire[A-Z0-9]*|Inspire[A-Z0-9]*|Sensation[A-Z0-9]*|Wildfire)[ _-](.+?)(?:[/;\\)]|Build|MIUI|1\\.0)");
parser[1] = "HTC $1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[170] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *HYUNDAI (T\\d[^/]*) Build");
parser[1] = "Hyundai $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[171] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *HYUNDAI ([^;/]+) Build");
parser[1] = "Hyundai $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[172] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(X700|Hold X|MB-6900) Build");
parser[1] = "Hyundai $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[173] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:iBall[ _\\-])?(Andi)[ _]?(\\d[^;/]*) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[174] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IBall)(?:[ _]([^;/]+)|) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[175] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(NT-\\d+[^ ;/]*|Net[Tt]AB [^;/]+|Mercury [A-Z]+|iconBIT)(?: S/N:[^;/]+)? Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[176] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IMO)[ _]([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[177] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *i-?mobile[ _]([^/]+) Build/");
parser[1] = "i-mobile $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[178] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(i-(?:style|note)[^/]*) Build/");
parser[1] = "i-mobile $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[179] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ImPAD) ?(\\d+(?:.)*) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[180] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Infinix)[ _]([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[181] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Informer)[ \\-]([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[182] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TAB) ?([78][12]4) Build");
parser[1] = "Intenso $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[183] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Intex[ _])?(AQUA|Aqua)([ _\\.\\-])([^;/]+) *(?:Build|;)");
parser[1] = "$1$2$3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[184] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:INTEX|Intex)(?:[_ ]([^\\ _;/]+))(?:[_ ]([^\\ _;/]+))? *(?:Build|;)");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[185] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([iI]Buddy)[ _]?(Connect)(?:_|\\?_| )?([^;/]*) *(?:Build|;)");
parser[1] = "$1 $2 $3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[186] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(I-Buddy)[ _]([^;/]+) *(?:Build|;)");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[187] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(iOCEAN) ([^/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[188] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TP\\d+(?:\\.\\d+)?\\-\\d[^;/]+) Build");
parser[1] = "ionik $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[189] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(M702pro) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[190] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(DE88Plus|MD70) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[191] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *IVIO[_\\-]([^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[192] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TPC-\\d+|JAY-TECH) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[193] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(JY-[^;/]+|G[234]S?) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[194] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(JXD)[ _\\-]([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[195] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Karbonn[ _]?([^;/]+) *(?:Build|;)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[196] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([^;]+) Build/Karbonn");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[197] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(A11|A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2|Titanium S\\d) +Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[198] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IS01|IS03|IS05|IS\\d{2}SH) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[199] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IS04) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[200] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IS06|IS\\d{2}PT) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[201] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IS11S) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[202] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IS11CA) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[203] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IS11LG) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[204] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IS11N) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[205] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IS11PT) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[206] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IS12F) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[207] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IS12M) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[208] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IS12S) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[209] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ISW11F) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[210] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ISW11HT) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[211] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ISW11K) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[212] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ISW11M) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[213] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ISW11SC) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[214] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ISW12HT) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[215] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ISW13HT) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[216] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ISW?[0-9]{2}[A-Z]{0,2}) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[217] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(INFOBAR [^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[218] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(JOYPAD|Joypad)[ _]([^;/]+) Build/");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[219] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Vox|VOX|Arc|K080) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[220] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\b(Kobo Touch)\\b");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[221] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(K-Touch)[ _]([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[222] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:EV|KM)-S\\d+[A-Z]?) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[223] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Zio|Hydro|Torque|Event|EVENT|Echo|Milano|Rise|URBANO PROGRESSO|WX04K|WX06K|WX10K|KYL21|101K|C5[12]\\d{2}) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[224] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:LAVA[ _])?IRIS[ _\\-]?([^/;\\)]+) *(?:;|\\)|Build)");
parser[1] = "Iris $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[225] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *LAVA[ _]([^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[226] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:(Aspire A1)|(?:LEMON|Lemon)[ _]([^;/]+))_? Build");
parser[1] = "Lemon $1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[227] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TAB-1012) Build/");
parser[1] = "Lenco $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[228] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; Lenco ([^;/]+) Build/");
parser[1] = "Lenco $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[229] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(A1_07|A2107A-H|S2005A-H|S1-37AH0) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[230] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Idea[Tp]ab)[ _]([^;/]+);? Build");
parser[1] = "Lenovo $1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[231] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Idea(?:Tab|pad)) ?([^;/]+) Build");
parser[1] = "Lenovo $1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[232] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ThinkPad) ?(Tablet) Build/");
parser[1] = "Lenovo $1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[233] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:LNV-)?(?:=?[Ll]enovo[ _\\-]?|LENOVO[ _])+(.+?)(?:Build|[;/\\)])");
parser[1] = "Lenovo $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[234] = parser;
parser = Object.create(null);
parser[0] = new RegExp("[;,] (?:Vodafone )?(SmartTab) ?(II) ?(\\d+) Build/");
parser[1] = "Lenovo $1 $2 $3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[235] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Ideapad )?K1 Build/");
parser[1] = "Lenovo Ideapad K1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[236] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(3GC101|3GW10[01]|A390) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[237] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\b(?:Lenovo|LENOVO)+[ _\\-]?([^,;:/ ]+)");
parser[1] = "Lenovo $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[238] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(MFC\\d+)[A-Z]{2}([^;,/]*),? Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[239] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(E[34][0-9]{2}|LS[6-8][0-9]{2}|VS[6-9][0-9]+[^;/]+|Nexus 4|Nexus 5X?|GT540f?|Optimus (?:2X|G|4X HD)|OptimusX4HD) *(?:Build|;)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[240] = parser;
parser = Object.create(null);
parser[0] = new RegExp("[;:] *(L-\\d+[A-Z]|LGL\\d+[A-Z]?)(?:/V\\d+)? *(?:Build|[;\\)])");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[241] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(LG-)([A-Z]{1,2}\\d{2,}[^,;/\\)\\(]*?)(?:Build| V\\d+|[,;/\\)\\(]|$)");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[242] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(LG[ \\-]|LG)([^;/]+)[;/]? Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[243] = parser;
parser = Object.create(null);
parser[0] = new RegExp("^(LG)-([^;/]+)/ Mozilla/.*; Android");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[244] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Web0S); Linux/(SmartTV)");
parser[1] = "LG $1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[245] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:SMB|smb)[^;/]+) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[246] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Malata|MALATA) ([^;/]+) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[247] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(MS[45][0-9]{3}|MID0[568][NS]?|MID[1-9]|MID[78]0[1-9]|MID970[1-9]|MID100[1-9]) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[248] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(M1052|M806|M9000|M9100|M9701|MID100|MID120|MID125|MID130|MID135|MID140|MID701|MID710|MID713|MID727|MID728|MID731|MID732|MID733|MID735|MID736|MID737|MID760|MID800|MID810|MID820|MID830|MID833|MID835|MID860|MID900|MID930|MID933|MID960|MID980) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[249] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(GenxDroid7|MSD7.*|AX\\d.*|Tab 701|Tab 722) Build/");
parser[1] = "Maxx $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[250] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(M-PP[^;/]+|PhonePad ?\\d{2,}[^;/]+) Build");
parser[1] = "Mediacom $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[251] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(M-MP[^;/]+|SmartPad ?\\d{2,}[^;/]+) Build");
parser[1] = "Mediacom $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[252] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:MD_)?LIFETAB[ _]([^;/]+) Build");
parser[1] = "Medion Lifetab $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[253] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *MEDION ([^;/]+) Build");
parser[1] = "Medion $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[254] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(M030|M031|M035|M040|M065|m9) Build");
parser[1] = "Meizu $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[255] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:meizu_|MEIZU )(.+?) *(?:Build|[;\\)])");
parser[1] = "Meizu $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[256] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Micromax[ _](A111|A240)|(A111|A240)) Build");
parser[1] = "Micromax $1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[257] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Micromax[ _](A\\d{2,3}[^;/]*) Build");
parser[1] = "Micromax $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[258] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(A\\d{2}|A[12]\\d{2}|A90S|A110Q) Build");
parser[1] = "Micromax $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[259] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Micromax[ _](P\\d{3}[^;/]*) Build");
parser[1] = "Micromax $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[260] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(P\\d{3}|P\\d{3}\\(Funbook\\)) Build");
parser[1] = "Micromax $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[261] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(MITO)[ _\\-]?([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[262] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Cynus)[ _](F5|T\\d|.+?) *(?:Build|[;/\\)])");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[263] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(MODECOM )?(FreeTab) ?([^;/]+) Build");
parser[1] = "$1$2 $3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[264] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(MODECOM )([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[265] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(MZ\\d{3}\\+?|MZ\\d{3} 4G|Xoom|XOOM[^;/]*) Build");
parser[1] = "Motorola $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[266] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Milestone )(XT[^;/]*) Build");
parser[1] = "Motorola $1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[267] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Motoroi ?x|Droid X|DROIDX) Build");
parser[1] = "Motorola $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[268] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Droid[^;/]*|DROID[^;/]*|Milestone[^;/]*|Photon|Triumph|Devour|Titanium) Build");
parser[1] = "Motorola $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[269] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(A555|A85[34][^;/]*|A95[356]|ME[58]\\d{2}\\+?|ME600|ME632|ME722|MB\\d{3}\\+?|MT680|MT710|MT870|MT887|MT917|WX435|WX453|WX44[25]|XT\\d{3,4}[A-Z\\+]*|CL[iI]Q|CL[iI]Q XT) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[270] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Motorola MOT-|Motorola[ _\\-]|MOT\\-?)([^;/]+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[271] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Moto[_ ]?|MOT\\-)([^;/]+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[272] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:MP[DQ]C|MPG\\d{1,4}|MP\\d{3,4}|MID(?:(?:10[234]|114|43|7[247]|8[24]|7)C|8[01]1))[^;/]*) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[273] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:MSI[ _])?(Primo\\d+|Enjoy[ _\\-][^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[274] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Multilaser[ _]([^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[275] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(My)[_]?(Pad)[ _]([^;/]+) Build");
parser[1] = "$1$2 $3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[276] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(My)\\|?(Phone)[ _]([^;/]+) Build");
parser[1] = "$1$2 $3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[277] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(A\\d+)[ _](Duo)? Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[278] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(myTab[^;/]*) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[279] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(NABI2?-)([^;/]+) Build/");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[280] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(N-\\d+[CDE]) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[281] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(NEC-)(.*) Build/");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[282] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(LT-NA7) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[283] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(NXM\\d+[A-z0-9_]*|Next\\d[A-z0-9_ \\-]*|NEXT\\d[A-z0-9_ \\-]*|Nextbook [A-z0-9_ ]*|DATAM803HC|M805)(?: Build|[\\);])");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[284] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Nokia)([ _\\-]*)([^;/]*) Build");
parser[1] = "$1$2$3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[285] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Nook ?|Barnes & Noble Nook |BN )([^;/]+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[286] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(NOOK )?(BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[287] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; Build/(Nook)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[288] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(OP110|OliPad[^;/]+) Build");
parser[1] = "Olivetti $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[289] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *OMEGA[ _\\-](MID[^;/]+) Build");
parser[1] = "Omega $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[290] = parser;
parser = Object.create(null);
parser[0] = new RegExp("^(MID7500|MID\\d+) Mozilla/5\\.0 \\(iPad;");
parser[1] = "Omega $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[291] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:CIUS|cius)[^;/]*) Build");
parser[1] = "Openpeak $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[292] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Find ?(?:5|7a)|R8[012]\\d{1,2}|T703\\d{0,1}|U70\\d{1,2}T?|X90\\d{1,2}) Build");
parser[1] = "Oppo $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[293] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *OPPO ?([^;/]+) Build/");
parser[1] = "Oppo $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[294] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Odys\\-|ODYS\\-|ODYS )([^;/]+) Build");
parser[1] = "Odys $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[295] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SELECT) ?(7) Build");
parser[1] = "Odys $1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[296] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(PEDI)_(PLUS)_(W) Build");
parser[1] = "Odys $1 $2 $3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[297] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(AEON|BRAVIO|FUSION|FUSION2IN1|Genio|EOS10|IEOS[^;/]*|IRON|Loox|LOOX|LOOX Plus|Motion|NOON|NOON_PRO|NEXT|OPOS|PEDI[^;/]*|PRIME[^;/]*|STUDYTAB|TABLO|Tablet-PC-4|UNO_X8|XELIO[^;/]*|Xelio ?\\d+ ?[Pp]ro|XENO10|XPRESS PRO) Build");
parser[1] = "Odys $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[298] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; (ONE [a-zA-Z]\\d+) Build/");
parser[1] = "OnePlus $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[299] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; (ONEPLUS [a-zA-Z]\\d+) Build/");
parser[1] = "OnePlus $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[300] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TP-\\d+) Build/");
parser[1] = "Orion $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[301] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(G100W?) Build/");
parser[1] = "PackardBell $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[302] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Panasonic)[_ ]([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[303] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(FZ-A1B|JT-B1) Build");
parser[1] = "Panasonic $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[304] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(dL1|DL1) Build");
parser[1] = "Panasonic $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[305] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SKY[ _])?(IM\\-[AT]\\d{3}[^;/]+).* Build/");
parser[1] = "Pantech $1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[306] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:ADR8995|ADR910L|ADR930L|ADR930VW|PTL21|P8000)(?: 4G)?) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[307] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Pantech([^;/]+).* Build/");
parser[1] = "Pantech $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[308] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(papyre)[ _\\-]([^;/]+) Build/");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[309] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Touchlet )?(X10\\.[^;/]+) Build/");
parser[1] = "Pearl $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[310] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; PHICOMM (i800) Build/");
parser[1] = "Phicomm $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[311] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; PHICOMM ([^;/]+) Build/");
parser[1] = "Phicomm $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[312] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(FWS\\d{3}[^;/]+) Build/");
parser[1] = "Phicomm $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[313] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(D633|D822|D833|T539|T939|V726|W335|W336|W337|W3568|W536|W5510|W626|W632|W6350|W6360|W6500|W732|W736|W737|W7376|W820|W832|W8355|W8500|W8510|W930) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[314] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Philips|PHILIPS)[ _]([^;/]+) Build");
parser[1] = "Philips $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[315] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Android 4\\..*; *(M[12356789]|U[12368]|S[123])\\ ?(pro)? Build");
parser[1] = "Pipo $1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[316] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(MOMO[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[317] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Polaroid[ _])?((?:MIDC\\d{3,}|PMID\\d{2,}|PTAB\\d{3,})[^;/]*)(\\/[^;/]*)? Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[318] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Polaroid )(Tablet) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[319] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(POMP)[ _\\-](.+?) *(?:Build|[;/\\)])");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[320] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TB07STA|TB10STA|TB07FTA|TB10FTA) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[321] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Positivo )?((?:YPY|Ypy)[^;/]+) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[322] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(MOB-[^;/]+) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[323] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *POV[ _\\-]([^;/]+) Build/");
parser[1] = "POV $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[324] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:TAB-PLAYTAB|TAB-PROTAB|PROTAB|PlayTabPro|Mobii[ _\\-]|TAB-P)[^;/]*) Build/");
parser[1] = "POV $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[325] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Prestigio )?((?:PAP|PMP)\\d[^;/]+) Build/");
parser[1] = "Prestigio $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[326] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(PLT[0-9]{4}.*) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[327] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(A2|A5|A8|A900)_?(Classic)? Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[328] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Q[Mm]obile)_([^_]+)_([^_]+) Build");
parser[1] = "Qmobile $2 $3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[329] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Q\\-?[Mm]obile)[_ ](A[^;/]+) Build");
parser[1] = "Qmobile $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[330] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Q\\-Smart)[ _]([^;/]+) Build/");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[331] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Q\\-?[Mm]obile)[ _\\-](S[^;/]+) Build/");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[332] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TA1013) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[333] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; (RCT\\w+) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[334] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(RK\\d+),? Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[335] = parser;
parser = Object.create(null);
parser[0] = new RegExp(" Build/(RK\\d+)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[336] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SAMSUNG |Samsung )?((?:Galaxy (?:Note II|S\\d)|GT-I9082|GT-I9205|GT-N7\\d{3}|SM-N9005)[^;/]*)\\/?[^;/]* Build/");
parser[1] = "Samsung $1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[337] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Google )?(Nexus [Ss](?: 4G)?) Build/");
parser[1] = "Samsung $1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[338] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SAMSUNG |Samsung )([^\\/]*)\\/[^ ]* Build/");
parser[1] = "Samsung $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[339] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Galaxy(?: Ace| Nexus| S ?II+|Nexus S| with MCR 1.2| Mini Plus 4G)?) Build/");
parser[1] = "Samsung $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[340] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SAMSUNG[ _\\-] *)+([^;/]+) Build");
parser[1] = "Samsung $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[341] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SAMSUNG-)?(GT\\-[BINPS]\\d{4}[^\\/]*)(\\/[^ ]*) Build");
parser[1] = "Samsung $1$2$3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[342] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(?:; *|^)((?:GT\\-[BIiNPS]\\d{4}|I9\\d{2}0[A-Za-z\\+]?\\b)[^;/\\)]*?)(?:Build|Linux|MIUI|[;/\\)])");
parser[1] = "Samsung $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[343] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; (SAMSUNG-)([A-Za-z0-9\\-]+).* Build/");
parser[1] = "Samsung $1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[344] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:SCH|SGH|SHV|SHW|SPH|SC|SM)\\-[A-Za-z0-9 ]+)(/?[^ ]*)? Build");
parser[1] = "Samsung $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[345] = parser;
parser = Object.create(null);
parser[0] = new RegExp(" ((?:SCH)\\-[A-Za-z0-9 ]+)(/?[^ ]*)? Build");
parser[1] = "Samsung $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[346] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Behold ?(?:2|II)|YP\\-G[^;/]+|EK-GC100|SCL21|I9300) Build");
parser[1] = "Samsung $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[347] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SH\\-?\\d\\d[^;/]+|SBM\\d[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[348] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SHARP[ -])([^;/]+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[349] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SPX[_\\-]\\d[^;/]*) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[350] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SX7\\-PEARL\\.GmbH) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[351] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SP[T]?\\-\\d{2}[^;/]*) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[352] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SK\\-.*) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[353] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:SKYTEX|SX)-([^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[354] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(IMAGINE [^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[355] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SmartQ) ?([^;/]+) Build/");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[356] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(WF7C|WF10C|SBT[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[357] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SBM(?:003SH|005SH|006SH|007SH|102SH)) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[358] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(003P|101P|101P11C|102P) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[359] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(00\\dZ) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[360] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; HTC(X06HT) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[361] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(001HT|X06HT) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[362] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(201M) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[363] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ST\\d{4}.*)Build/ST");
parser[1] = "Trekstor $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[364] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ST\\d{4}.*) Build/");
parser[1] = "Trekstor $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[365] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Sony ?Ericsson ?)([^;/]+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[366] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:SK|ST|E|X|LT|MK|MT|WT)\\d{2}[a-z0-9]*(?:-o)?|R800i|U20i) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[367] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Xperia (?:A8|Arc|Acro|Active|Live with Walkman|Mini|Neo|Play|Pro|Ray|X\\d+)[^;/]*) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[368] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; Sony (Tablet[^;/]+) Build");
parser[1] = "Sony $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[369] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; Sony ([^;/]+) Build");
parser[1] = "Sony $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[370] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Sony)([A-Za-z0-9\\-]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[371] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Xperia [^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[372] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(C(?:1[0-9]|2[0-9]|53|55|6[0-9])[0-9]{2}|D[25]\\d{3}|D6[56]\\d{2}) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[373] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SGP\\d{3}|SGPT\\d{2}) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[374] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(NW-Z1000Series) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[375] = parser;
parser = Object.create(null);
parser[0] = new RegExp("PLAYSTATION 3");
parser[1] = "PlayStation 3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[376] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(PlayStation (?:Portable|Vita|\\d+))");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[377] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:CSL_Spice|Spice|SPICE|CSL)[ _\\-]?)?([Mm][Ii])([ _\\-])?(\\d{3}[^;/]*) Build/");
parser[1] = "$1$2$3$4";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[378] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Sprint )(.+?) *(?:Build|[;/])");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[379] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\b(Sprint)[: ]([^;,/ ]+)");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[380] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TAGI[ ]?)(MID) ?([^;/]+) Build/");
parser[1] = "$1$2$3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[381] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Oyster500|Opal 800) Build");
parser[1] = "Tecmobile $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[382] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TECNO[ _])([^;/]+) Build/");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[383] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Android for (Telechips|Techvision) ([^ ]+) ");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[384] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(T-Hub2) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[385] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(PAD) ?(100[12]) Build/");
parser[1] = "Terra $1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[386] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(T[BM]-\\d{3}[^;/]+) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[387] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(tolino [^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[388] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *Build/.* (TOLINO_BROWSER)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[389] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:CJ[ -])?(ThL|THL)[ -]([^;/]+) Build/");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[390] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(T100|T200|T5|W100|W200|W8s) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[391] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(T-Mobile[ _]G2[ _]Touch) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[392] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(T-Mobile[ _]G2) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[393] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(T-Mobile myTouch Q) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[394] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(T-Mobile myTouch) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[395] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(T-Mobile_Espresso) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[396] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(T-Mobile G1) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[397] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\b(T-Mobile ?)?(myTouch)[ _]?([34]G)[ _]?([^\\/]*) (?:Mozilla|Build)");
parser[1] = "$1$2 $3 $4";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[398] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\b(T-Mobile)_([^_]+)_(.*) Build");
parser[1] = "$1 $2 $3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[399] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\b(T-Mobile)[_ ]?(.*?)Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[400] = parser;
parser = Object.create(null);
parser[0] = new RegExp(" (ATP[0-9]{4}) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[401] = parser;
parser = Object.create(null);
parser[0] = new RegExp(" *(TOOKY)[ _\\-]([^;/]+) ?(?:Build|;)");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[402] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\b(TOSHIBA_AC_AND_AZ|TOSHIBA_FOLIO_AND_A|FOLIO_AND_A)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[403] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([Ff]olio ?100) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[404] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(AT[0-9]{2,3}(?:\\-A|LE\\-A|PE\\-A|SE|a)?|AT7-A|AT1S0|Hikari-iFrame/WDPF-[^;/]+|THRiVE|Thrive) Build/");
parser[1] = "Toshiba $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[405] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TM-MID\\d+[^;/]+|TOUCHMATE|MID-750) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[406] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TM-SM\\d+[^;/]+) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[407] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(A10 [Bb]asic2?) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[408] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(TREQ[ _\\-])([^;/]+) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[409] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(X-?5|X-?3) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[410] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(A502\\+?|A936|A603|X1|X2) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[411] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(TOUCH(?:TAB|PAD).+?) Build/");
parser[1] = "Versus $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[412] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(VERTU) ([^;/]+) Build/");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[413] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Videocon)[ _\\-]([^;/]+) *(?:Build|;)");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[414] = parser;
parser = Object.create(null);
parser[0] = new RegExp(" (VT\\d{2}[A-Za-z]*) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[415] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((?:ViewPad|ViewPhone|VSD)[^;/]+) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[416] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ViewSonic-)([^;/]+) Build/");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[417] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(GTablet.*) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[418] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([Vv]ivo)[ _]([^;/]+) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[419] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(Vodafone) (.*) Build/");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[420] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Walton[ _\\-])?(Primo[ _\\-][^;/]+) Build");
parser[1] = "Walton $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[421] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:WIKO[ \\-])?(CINK\\+?|BARRY|BLOOM|DARKFULL|DARKMOON|DARKNIGHT|DARKSIDE|FIZZ|HIGHWAY|IGGY|OZZY|RAINBOW|STAIRWAY|SUBLIM|WAX|CINK [^;/]+) Build/");
parser[1] = "Wiko $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[422] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *WellcoM-([^;/]+) Build");
parser[1] = "Wellcom $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[423] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(?:(WeTab)-Browser|; (wetab) Build)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[424] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(AT-AS[^;/]+) Build");
parser[1] = "Wolfgang $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[425] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Woxter|Wxt) ([^;/]+) Build");
parser[1] = "Woxter $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[426] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Xenta |Luna )?(TAB[234][0-9]{2}|TAB0[78]-\\d{3}|TAB0?9-\\d{3}|TAB1[03]-\\d{3}|SMP\\d{2}-\\d{3}) Build/");
parser[1] = "Yarvik $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[427] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([A-Z]{2,4})(M\\d{3,}[A-Z]{2})([^;\\)\\/]*)(?: Build|[;\\)])");
parser[1] = "Yifang $1$2$3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[428] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *((MI|HM|MI-ONE|Redmi)[ -](NOTE |Note )?[^;/]*) (Build|MIUI)/");
parser[1] = "XiaoMi $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[429] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *XOLO[ _]([^;/]*tab.*) Build");
parser[1] = "Xolo $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[430] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *XOLO[ _]([^;/]+) Build");
parser[1] = "Xolo $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[431] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(q\\d0{2,3}[a-z]?) Build");
parser[1] = "Xolo $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[432] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(PAD ?[79]\\d+[^;/]*|TelePAD\\d+[^;/]) Build");
parser[1] = "Xoro $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[433] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:(?:ZOPO|Zopo)[ _]([^;/]+)|(ZP ?(?:\\d{2}[^;/]+|C2))|(C[2379])) Build");
parser[1] = "$1$2$3";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[434] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ZiiLABS) (Zii[^;/]*) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[435] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Zii)_([^;/]*) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[436] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(ARIZONA|(?:ATLAS|Atlas) W|D930|Grand (?:[SX][^;]*|Era|Memo[^;]*)|JOE|(?:Kis|KIS)\\b[^;]*|Libra|Light [^;]*|N8[056][01]|N850L|N8000|N9[15]\\d{2}|N9810|NX501|Optik|(?:Vip )Racer[^;]*|RacerII|RACERII|San Francisco[^;]*|V9[AC]|V55|V881|Z[679][0-9]{2}[A-z]?) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[437] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *([A-Z]\\d+)_USA_[^;]* Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[438] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(SmartTab\\d+)[^;]* Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[439] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Blade|BLADE|ZTE-BLADE)([^;/]*) Build");
parser[1] = "ZTE Blade$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[440] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:Skate|SKATE|ZTE-SKATE)([^;/]*) Build");
parser[1] = "ZTE Skate$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[441] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(Orange |Optimus )(Monte Carlo|San Francisco) Build");
parser[1] = "$1$2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[442] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(?:ZXY-ZTE_|ZTE\\-U |ZTE[\\- _]|ZTE-C[_ ])([^;/]+) Build");
parser[1] = "ZTE $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[443] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; (BASE) (lutea|Lutea 2|Tab[^;]*) Build");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[444] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; (Avea inTouch 2|soft stone|tmn smart a7|Movistar[ _]Link) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[445] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(vp9plus)\\)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[446] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(Cloud[ _]Z5|z1000|Z99 2G|z99|z930|z999|z990|z909|Z919|z900) Build/");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[447] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(KFOT|Kindle Fire) Build\\b");
parser[1] = "Kindle Fire";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[448] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(KFOTE|Amazon Kindle Fire2) Build\\b");
parser[1] = "Kindle Fire 2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[449] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(KFTT) Build\\b");
parser[1] = "Kindle Fire HD";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[450] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(KFJWI) Build\\b");
parser[1] = "Kindle Fire HD 8.9\" WiFi";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[451] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(KFJWA) Build\\b");
parser[1] = "Kindle Fire HD 8.9\" 4G";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[452] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(KFSOWI) Build\\b");
parser[1] = "Kindle Fire HD 7\" WiFi";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[453] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(KFTHWI) Build\\b");
parser[1] = "Kindle Fire HDX 7\" WiFi";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[454] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(KFTHWA) Build\\b");
parser[1] = "Kindle Fire HDX 7\" 4G";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[455] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(KFAPWI) Build\\b");
parser[1] = "Kindle Fire HDX 8.9\" WiFi";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[456] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(KFAPWA) Build\\b");
parser[1] = "Kindle Fire HDX 8.9\" 4G";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[457] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?Amazon ([^;/]+) Build\\b");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[458] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(Kindle) Build\\b");
parser[1] = "Kindle";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[459] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; ?(Silk)/(\\d+)\\.(\\d+)(?:\\.([0-9\\-]+))? Build\\b");
parser[1] = "Kindle Fire";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[460] = parser;
parser = Object.create(null);
parser[0] = new RegExp(" (Kindle)/(\\d+\\.\\d+)");
parser[1] = "Kindle";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[461] = parser;
parser = Object.create(null);
parser[0] = new RegExp(" (Silk|Kindle)/(\\d+)\\.");
parser[1] = "Kindle";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[462] = parser;
parser = Object.create(null);
parser[0] = new RegExp("(sprd)\\-([^/]+)/");
parser[1] = "$1 $2";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[463] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(H\\d{2}00\\+?) Build");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[464] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(iphone|iPhone5) Build/");
parser[1] = "Xianghe $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[465] = parser;
parser = Object.create(null);
parser[0] = new RegExp("; *(e\\d{4}[a-z]?_?v\\d+|v89_[^;/]+)[^;/]+ Build/");
parser[1] = "Xianghe $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[466] = parser;
parser = Object.create(null);
parser[0] = new RegExp("\\bUSCC[_\\-]?([^ ;/\\)]+)");
parser[1] = "$1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[467] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Windows Phone [^;]+; .*?IEMobile/[^;\\)]+[;\\)] ?(?:ARM; ?Touch; ?|Touch; ?)?(?:ALCATEL)[^;]*; *([^;,\\)]+)");
parser[1] = "Alcatel $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[468] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Windows Phone [^;]+; .*?IEMobile/[^;\\)]+[;\\)] ?(?:ARM; ?Touch; ?|Touch; ?|WpsLondonTest; ?)?(?:ASUS|Asus)[^;]*; *([^;,\\)]+)");
parser[1] = "Asus $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[469] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Windows Phone [^;]+; .*?IEMobile/[^;\\)]+[;\\)] ?(?:ARM; ?Touch; ?|Touch; ?)?(?:DELL|Dell)[^;]*; *([^;,\\)]+)");
parser[1] = "Dell $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
exports.device[470] = parser;
parser = Object.create(null);
parser[0] = new RegExp("Windows Phone [^;]+; .*?IEMobile/[^;\\)]+[;\\)] ?(?:ARM; ?Touch; ?|Touch; ?|WpsLondonTest; ?)?(?:HTC|Htc|HTC_blocked[^;]*)[^;]*; *(?:HTC)?([^;,\\)]+)");
parser[1] = "HTC $1";
parser[2] = 0;
parser[3] = 0;
parser[4] = 0;
expor